/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.1
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TaxType See Tax Types â€“ can only be used on update calls
type TaxType string

// List of TaxType
const (
	OUTPUT_TaxType TaxType = "OUTPUT"
	INPUT_TaxType TaxType = "INPUT"
	CAPEXINPUT_TaxType TaxType = "CAPEXINPUT"
	EXEMPTEXPORT_TaxType TaxType = "EXEMPTEXPORT"
	EXEMPTEXPENSES_TaxType TaxType = "EXEMPTEXPENSES"
	EXEMPTCAPITAL_TaxType TaxType = "EXEMPTCAPITAL"
	EXEMPTOUTPUT_TaxType TaxType = "EXEMPTOUTPUT"
	INPUTTAXED_TaxType TaxType = "INPUTTAXED"
	BASEXCLUDED_TaxType TaxType = "BASEXCLUDED"
	GSTONCAPIMPORTS_TaxType TaxType = "GSTONCAPIMPORTS"
	GSTONIMPORTS_TaxType TaxType = "GSTONIMPORTS"
	NONE_TaxType TaxType = "NONE"
	INPUT2_TaxType TaxType = "INPUT2"
	ZERORATED_TaxType TaxType = "ZERORATED"
	OUTPUT2_TaxType TaxType = "OUTPUT2"
	CAPEXINPUT2_TaxType TaxType = "CAPEXINPUT2"
	CAPEXOUTPUT_TaxType TaxType = "CAPEXOUTPUT"
	CAPEXOUTPUT2_TaxType TaxType = "CAPEXOUTPUT2"
	CAPEXSRINPUT_TaxType TaxType = "CAPEXSRINPUT"
	CAPEXSROUTPUT_TaxType TaxType = "CAPEXSROUTPUT"
	ECACQUISITIONS_TaxType TaxType = "ECACQUISITIONS"
	ECZRINPUT_TaxType TaxType = "ECZRINPUT"
	ECZROUTPUT_TaxType TaxType = "ECZROUTPUT"
	ECZROUTPUTSERVICES_TaxType TaxType = "ECZROUTPUTSERVICES"
	EXEMPTINPUT_TaxType TaxType = "EXEMPTINPUT"
	REVERSECHARGES_TaxType TaxType = "REVERSECHARGES"
	RRINPUT_TaxType TaxType = "RRINPUT"
	RROUTPUT_TaxType TaxType = "RROUTPUT"
	SRINPUT_TaxType TaxType = "SRINPUT"
	SROUTPUT_TaxType TaxType = "SROUTPUT"
	ZERORATEDINPUT_TaxType TaxType = "ZERORATEDINPUT"
	ZERORATEDOUTPUT_TaxType TaxType = "ZERORATEDOUTPUT"
	BLINPUT_TaxType TaxType = "BLINPUT"
	DSOUTPUT_TaxType TaxType = "DSOUTPUT"
	EPINPUT_TaxType TaxType = "EPINPUT"
	ES33_OUTPUT_TaxType TaxType = "ES33OUTPUT"
	ESN33_OUTPUT_TaxType TaxType = "ESN33OUTPUT"
	IGDSINPUT2_TaxType TaxType = "IGDSINPUT2"
	IMINPUT2_TaxType TaxType = "IMINPUT2"
	MEINPUT_TaxType TaxType = "MEINPUT"
	NRINPUT_TaxType TaxType = "NRINPUT"
	OPINPUT_TaxType TaxType = "OPINPUT"
	OSOUTPUT_TaxType TaxType = "OSOUTPUT"
	TXESSINPUT_TaxType TaxType = "TXESSINPUT"
	TXN33_INPUT_TaxType TaxType = "TXN33INPUT"
	TXPETINPUT_TaxType TaxType = "TXPETINPUT"
	TXREINPUT_TaxType TaxType = "TXREINPUT"
	INPUT3_TaxType TaxType = "INPUT3"
	INPUT4_TaxType TaxType = "INPUT4"
	OUTPUT3_TaxType TaxType = "OUTPUT3"
	OUTPUT4_TaxType TaxType = "OUTPUT4"
	SROUTPUT2_TaxType TaxType = "SROUTPUT2"
	TXCA_TaxType TaxType = "TXCA"
	SRCAS_TaxType TaxType = "SRCAS"
	BLINPUT2_TaxType TaxType = "BLINPUT2"
	DRCHARGESUPPLY20_TaxType TaxType = "DRCHARGESUPPLY20"
	DRCHARGE20_TaxType TaxType = "DRCHARGE20"
	DRCHARGESUPPLY5_TaxType TaxType = "DRCHARGESUPPLY5"
	DRCHARGE5_TaxType TaxType = "DRCHARGE5"
	BADDEBTRELIEF_TaxType TaxType = "BADDEBTRELIEF"
	IGDSINPUT3_TaxType TaxType = "IGDSINPUT3"
	SROVR_TaxType TaxType = "SROVR"
	TOURISTREFUND_TaxType TaxType = "TOURISTREFUND"
	TXRCN33_TaxType TaxType = "TXRCN33"
	TXRCRE_TaxType TaxType = "TXRCRE"
	TXRCESS_TaxType TaxType = "TXRCESS"
	TXRCTS_TaxType TaxType = "TXRCTS"
	OUTPUTY23_TaxType TaxType = "OUTPUTY23"
	DSOUTPUTY23_TaxType TaxType = "DSOUTPUTY23"
	INPUTY23_TaxType TaxType = "INPUTY23"
	IMINPUT2_Y23_TaxType TaxType = "IMINPUT2Y23"
	IGDSINPUT2_Y23_TaxType TaxType = "IGDSINPUT2Y23"
	TXPETINPUTY23_TaxType TaxType = "TXPETINPUTY23"
	TXESSINPUTY23_TaxType TaxType = "TXESSINPUTY23"
	TXN33_INPUTY23_TaxType TaxType = "TXN33INPUTY23"
	TXREINPUTY23_TaxType TaxType = "TXREINPUTY23"
	TXCAY23_TaxType TaxType = "TXCAY23"
	BADDEBTRELIEFY23_TaxType TaxType = "BADDEBTRELIEFY23"
	IGDSINPUT3_Y23_TaxType TaxType = "IGDSINPUT3Y23"
	SROVRRSY23_TaxType TaxType = "SROVRRSY23"
	SROVRLVGY23_TaxType TaxType = "SROVRLVGY23"
	SRLVGY23_TaxType TaxType = "SRLVGY23"
	TXRCN33_Y23_TaxType TaxType = "TXRCN33Y23"
	TXRCREY23_TaxType TaxType = "TXRCREY23"
	TXRCESSY23_TaxType TaxType = "TXRCESSY23"
	TXRCTSY23_TaxType TaxType = "TXRCTSY23"
	IM_TaxType TaxType = "IM"
	IMY23_TaxType TaxType = "IMY23"
	IMESS_TaxType TaxType = "IMESS"
	IMESSY23_TaxType TaxType = "IMESSY23"
	IMN33_TaxType TaxType = "IMN33"
	IMN33_Y23_TaxType TaxType = "IMN33Y23"
	IMRE_TaxType TaxType = "IMRE"
	IMREY23_TaxType TaxType = "IMREY23"
	BADDEBTRECOVERY_TaxType TaxType = "BADDEBTRECOVERY"
	BADDEBTRECOVERYY23_TaxType TaxType = "BADDEBTRECOVERYY23"
	OUTPUTY24_TaxType TaxType = "OUTPUTY24"
	DSOUTPUTY24_TaxType TaxType = "DSOUTPUTY24"
	INPUTY24_TaxType TaxType = "INPUTY24"
	IGDSINPUT2_Y24_TaxType TaxType = "IGDSINPUT2Y24"
	TXPETINPUTY24_TaxType TaxType = "TXPETINPUTY24"
	TXESSINPUTY24_TaxType TaxType = "TXESSINPUTY24"
	TXN33_INPUTY24_TaxType TaxType = "TXN33INPUTY24"
	TXREINPUTY24_TaxType TaxType = "TXREINPUTY24"
	TXCAY24_TaxType TaxType = "TXCAY24"
	BADDEBTRELIEFY24_TaxType TaxType = "BADDEBTRELIEFY24"
	IGDSINPUT3_Y24_TaxType TaxType = "IGDSINPUT3Y24"
	SROVRRSY24_TaxType TaxType = "SROVRRSY24"
	SROVRLVGY24_TaxType TaxType = "SROVRLVGY24"
	SRLVGY24_TaxType TaxType = "SRLVGY24"
	TXRCTSY24_TaxType TaxType = "TXRCTSY24"
	TXRCESSY24_TaxType TaxType = "TXRCESSY24"
	TXRCN33_Y24_TaxType TaxType = "TXRCN33Y24"
	TXRCREY24_TaxType TaxType = "TXRCREY24"
	IMY24_TaxType TaxType = "IMY24"
	IMESSY24_TaxType TaxType = "IMESSY24"
	IMN33_Y24_TaxType TaxType = "IMN33Y24"
	IMREY24_TaxType TaxType = "IMREY24"
	BADDEBTRECOVERYY24_TaxType TaxType = "BADDEBTRECOVERYY24"
	OSOUTPUT2_TaxType TaxType = "OSOUTPUT2"
)

// All allowed values of TaxType enum
var AllowedTaxTypeEnumValues = []TaxType{
	"OUTPUT",
	"INPUT",
	"CAPEXINPUT",
	"EXEMPTEXPORT",
	"EXEMPTEXPENSES",
	"EXEMPTCAPITAL",
	"EXEMPTOUTPUT",
	"INPUTTAXED",
	"BASEXCLUDED",
	"GSTONCAPIMPORTS",
	"GSTONIMPORTS",
	"NONE",
	"INPUT2",
	"ZERORATED",
	"OUTPUT2",
	"CAPEXINPUT2",
	"CAPEXOUTPUT",
	"CAPEXOUTPUT2",
	"CAPEXSRINPUT",
	"CAPEXSROUTPUT",
	"ECACQUISITIONS",
	"ECZRINPUT",
	"ECZROUTPUT",
	"ECZROUTPUTSERVICES",
	"EXEMPTINPUT",
	"REVERSECHARGES",
	"RRINPUT",
	"RROUTPUT",
	"SRINPUT",
	"SROUTPUT",
	"ZERORATEDINPUT",
	"ZERORATEDOUTPUT",
	"BLINPUT",
	"DSOUTPUT",
	"EPINPUT",
	"ES33OUTPUT",
	"ESN33OUTPUT",
	"IGDSINPUT2",
	"IMINPUT2",
	"MEINPUT",
	"NRINPUT",
	"OPINPUT",
	"OSOUTPUT",
	"TXESSINPUT",
	"TXN33INPUT",
	"TXPETINPUT",
	"TXREINPUT",
	"INPUT3",
	"INPUT4",
	"OUTPUT3",
	"OUTPUT4",
	"SROUTPUT2",
	"TXCA",
	"SRCAS",
	"BLINPUT2",
	"DRCHARGESUPPLY20",
	"DRCHARGE20",
	"DRCHARGESUPPLY5",
	"DRCHARGE5",
	"BADDEBTRELIEF",
	"IGDSINPUT3",
	"SROVR",
	"TOURISTREFUND",
	"TXRCN33",
	"TXRCRE",
	"TXRCESS",
	"TXRCTS",
	"OUTPUTY23",
	"DSOUTPUTY23",
	"INPUTY23",
	"IMINPUT2Y23",
	"IGDSINPUT2Y23",
	"TXPETINPUTY23",
	"TXESSINPUTY23",
	"TXN33INPUTY23",
	"TXREINPUTY23",
	"TXCAY23",
	"BADDEBTRELIEFY23",
	"IGDSINPUT3Y23",
	"SROVRRSY23",
	"SROVRLVGY23",
	"SRLVGY23",
	"TXRCN33Y23",
	"TXRCREY23",
	"TXRCESSY23",
	"TXRCTSY23",
	"IM",
	"IMY23",
	"IMESS",
	"IMESSY23",
	"IMN33",
	"IMN33Y23",
	"IMRE",
	"IMREY23",
	"BADDEBTRECOVERY",
	"BADDEBTRECOVERYY23",
	"OUTPUTY24",
	"DSOUTPUTY24",
	"INPUTY24",
	"IGDSINPUT2Y24",
	"TXPETINPUTY24",
	"TXESSINPUTY24",
	"TXN33INPUTY24",
	"TXREINPUTY24",
	"TXCAY24",
	"BADDEBTRELIEFY24",
	"IGDSINPUT3Y24",
	"SROVRRSY24",
	"SROVRLVGY24",
	"SRLVGY24",
	"TXRCTSY24",
	"TXRCESSY24",
	"TXRCN33Y24",
	"TXRCREY24",
	"IMY24",
	"IMESSY24",
	"IMN33Y24",
	"IMREY24",
	"BADDEBTRECOVERYY24",
	"OSOUTPUT2",
}

func (v *TaxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaxType(value)
	for _, existing := range AllowedTaxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaxType", value)
}

// NewTaxTypeFromValue returns a pointer to a valid TaxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxTypeFromValue(v string) (*TaxType, error) {
	ev := TaxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaxType: valid values are %v", v, AllowedTaxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaxType) IsValid() bool {
	for _, existing := range AllowedTaxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaxType value
func (v TaxType) Ptr() *TaxType {
	return &v
}

type NullableTaxType struct {
	value *TaxType
	isSet bool
}

func (v NullableTaxType) Get() *TaxType {
	return v.value
}

func (v *NullableTaxType) Set(val *TaxType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxType(val *TaxType) *NullableTaxType {
	return &NullableTaxType{value: val, isSet: true}
}

func (v NullableTaxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

